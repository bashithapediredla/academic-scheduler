import os
import logging
import smtplib
from datetime import datetime, timedelta
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from apscheduler.schedulers.background import BackgroundScheduler
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Flask App Setup
app = Flask(__name__)
CORS(app, resources={r"/schedule-reminder": {"origins": "https://yourfrontend.com"}})

# Rate Limiting
limiter = Limiter(get_remote_address)
limiter.init_app(app)

# Email Configuration
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 465
EMAIL_SENDER = os.getenv("EMAIL_SENDER")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")

# Logging Configuration
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# Scheduler Setup
scheduler = BackgroundScheduler()
scheduler.start()

def send_email(recipient, subject, message):
    """Send an email using SMTP."""
    try:
        msg = MIMEMultipart()
        msg["From"] = EMAIL_SENDER
        msg["To"] = recipient
        msg["Subject"] = subject
        msg.attach(MIMEText(message, "plain"))

        server = smtplib.SMTP_SSL(SMTP_SERVER, SMTP_PORT)
        server.login(EMAIL_SENDER, EMAIL_PASSWORD)
        server.send_message(msg)
        server.quit()

        logging.info(f"✅ Email sent successfully to {recipient}")
        return True
    except Exception as e:
        logging.error(f"❌ Error sending email: {e}")
        return False

@app.route("/schedule-reminder", methods=["POST"])
@limiter.limit("5 per minute")
def schedule_reminder():
    """Schedule an email to be sent one day before the given date."""
    try:
        data = request.json
        recipient = data.get("recipient")
        subject = data.get("subject")
        message = data.get("message")
        event_date_time = data.get("date_time")  # Expected format: "YYYY-MM-DD HH:MM"

        # Validate required fields
        if not recipient or not subject or not message or not event_date_time:
            return jsonify({"status": "error", "message": "Missing required fields!"}), 400
        
        # Validate email format
        if "@" not in recipient or "." not in recipient:
            return jsonify({"status": "error", "message": "Invalid email address!"}), 400
        
        # Convert event_date_time to datetime object
        event_datetime = datetime.strptime(event_date_time, "%Y-%m-%d %H:%M")
        reminder_time = event_datetime - timedelta(days=1)  # Schedule email 1 day before

        if reminder_time < datetime.now():
            return jsonify({"status": "error", "message": "Reminder time is in the past!"}), 400

        # Schedule the email
        job_id = f"{recipient}_{event_datetime.timestamp()}"
        scheduler.add_job(send_email, 'date', run_date=reminder_time, args=[recipient, subject, message], id=job_id)

        logging.info(f"✅ Reminder scheduled for {recipient} at {reminder_time}")
        return jsonify({"status": "success", "message": "Reminder scheduled successfully!"}), 200
    except Exception as e:
        logging.error(f"❌ Internal Server Error: {e}")
        return jsonify({"status": "error", "message": "Internal Server Error!"}), 500

if __name__ == "__main__":
    app.run(debug=True, port=5000)
